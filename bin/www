#!/usr/bin/env node

'use strict'

// Module dependencies.
const path = require('path');
const app = require(path.join(__dirname, '..', 'app'));
const debug = require('debug')('authapp:server');
const http = require('http');
const https = require('https');
const fs = require("fs");
const config = {
    key: fs.readFileSync(
      path.join(__dirname, '..', 'resources', 'certs', 'file.pem')),
    cert: fs.readFileSync(
      path.join(__dirname, '..', 'resources', 'certs', 'file.crt'))
};

// Get port from app
const port = app.get('port')
const ssl_port = app.get('ssl_port')

// Create HTTP server.
let server = http.createServer(app);

// Create HTTPS server.
let ssl_server = https.createServer(config, app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Listen on provided ssl_port
ssl_server.listen(ssl_port);
server.on('listening', onSSLListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for HTTPS server "listening" event.
 */
function onSSLListening() {
  let addr = ssl_server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('SSL Listening on ' + bind);
}
